{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Openfeed Developer Guide Introduction Openfeed is a new real-time market data protocol and feed from Barchart. Architecture Multicast UDP Connectivity Multicast UDP is the most efficient way to subscribe to a large number of products at a time. Consider using the UDP feed if you need simultaneous access to many markets, or if you need the lowest latency. Multicast UDP requires data center colocation with Barchart. Please contact Barchart for more information. Channels and Feeds Market data over multicast UDP is segmented across a number of channels. A channel is a logical grouping of instruments, typically corresponding to a group of products from a particular exchange. A channel is identified by a numeric channelId in the range of 1-255 Each channel is composed of a set of three multicast groups, called feeds. Channel ID Product Incremental Feed Snapshot Feed Definition Feed 1 CME 239.255.201.1:10001 239.255.202.1:20001 239.255.203.1:30001 2 CBOT 239.255.201.2:10002 239.255.202.2:20002 239.255.203.2:30002 3 NYMEX 239.255.201.3:10003 239.255.202.3:20003 239.255.203.3:30003 4 COMEX 239.255.201.4:10004 239.255.202.4:20004 239.255.203.4:30004 5 MGEX 239.255.201.5:10005 239.255.202.5:20005 239.255.203.5:30005 6 CME Europe 239.255.201.6:10006 239.255.202.6:20006 239.255.203.6:30006 7 BM&F 239.255.201.7:10007 239.255.202.7:20007 239.255.203.7:30007 8 ICE UK 239.255.201.8:10008 239.255.202.8:20008 239.255.203.8:30008 9 BATS 239.255.201.9:10009 239.255.202.9:20009 239.255.203.9:30009 10 NYSE Index 239.255.201.10:10010 239.255.202.10:20010 239.255.203.10:30010 11 FTSE Index 239.255.201.11:10011 239.255.202.11:20011 239.255.203.11:30011 12 S&P / DJ Index 239.255.201.12:10012 239.255.202.12:20012 239.255.203.12:30012 13 FOREX 239.255.201.13:10013 239.255.202.13:20013 239.255.203.13:30013 14 TSX 239.255.201.14:10014 239.255.202.14:20014 239.255.203.14:30014 15 239.255.201.15:10015 239.255.202.15:20015 239.255.203.15:30015 16 239.255.201.16:10016 239.255.202.16:20016 239.255.203.16:30016 17 239.255.201.17:10017 239.255.202.17:20017 239.255.203.17:30017 18 ERIS 239.255.201.18:10018 239.255.202.18:20018 239.255.203.18:30018 19 NASDAQ Mutual Funds 239.255.201.19:10019 239.255.202.19:20019 239.255.203.19:30019 20 FINRA OTC 239.255.201.20:10020 239.255.202.20:20020 239.255.203.20:30020 21 LME 239.255.201.21:10021 239.255.202.21:20021 239.255.203.21:30021 22 CFE 239.255.201.22:10022 239.255.202.22:20022 239.255.203.22:30022 23 Euronext 239.255.201.23:10023 239.255.202.23:20023 239.255.203.23:30023 24 ASX 239.255.201.24:10024 239.255.202.24:20024 239.255.203.24:30024 25 Montreal 239.255.201.25:10025 239.255.202.25:20025 239.255.203.25:30025 26 EUREX 239.255.201.26:10026 239.255.202.26:20026 239.255.203.26:30026 27 NASDAQ Index 239.255.201.27:10027 239.255.202.27:20027 239.255.203.27:30027 28 CBOE Index 239.255.201.28:10028 239.255.202.28:20028 239.255.203.28:30028 29 239.255.201.29:10029 239.255.202.29:20029 239.255.203.29:30029 30 239.255.201.30:10030 239.255.202.30:20030 239.255.203.30:30030 31 239.255.201.31:10031 239.255.202.31:20031 239.255.203.31:30031 32 239.255.201.32:10032 239.255.202.32:20032 239.255.203.32:30032 33 Hong Kong Futures 239.255.201.33:10033 239.255.202.33:20033 239.255.203.33:30033 34 239.255.201.34:10034 239.255.202.34:20034 239.255.203.34:30034 35 ICE 239.255.201.35:10035 239.255.202.35:20035 239.255.203.35:30035 Incremental Feed The incremental feed is a sequence of messages that reflect updates to the current state of the channel. An Openfeed message on the incremental feed can contain either an instrument definition or a market update. The translator will send all current Instrument Definitions upon Sunday system startup. If a new instrument is created during the week, the translator will send the instrument definition prior to any market updates. The packet sequence number will increment by 1 with every packet. A gap in sequence numbers indicates packet loss, and the client will need perform the channel recovery procedure in order to guarantee the correctness of the books and session statistics. Snapshot Feed The snapshot feed is used to recover the state of the channel in case the client suffers an outage, or joins the channel late. The snapshot feed operates in a loop over all the instruments on the channel. The loop is configured per-channel to generate market snapshots at a certain rate. Once all snapshots have been sent, the sequence number resets to 1 and the loop restarts. The total number of markets available on a channel at the time the snapshot was generated is recorded in the totalCount field. When a snapshot is generated, the syncSequence field will be populated with the last packet sequence number sent on the incremental channel. This is useful for synchronizing between the snapshot and incremental feeds when performing the channel recovery procedure. Definition Feed The definition feed is used to recover the instrument definitions on the channel. If the client misses the instrument definition broadcast on the incremental feed at Sunday start up, the definitions can be recovered from the definition feed. Additionally, if the client experiences packet loss or a client failure, the definition feed can be used to recover any newly created instrument definitions that may have been missed. Like the snapshot feed, the definition feed operates in a loop over all the instruments on the channel. The totalCount field is populated with the total number instruments available at the time packet was sent. Additional instruments added to the channel during the instrument loop will included in the loop before restarts. next loop. The syncSequence field is populated with the most recent packet sequence number sent on the incremental feed. Packet Format A single UDP packet contains one binary header and zero or more openfeed messages. Binary Header Each UDP packet payload starts with a binary header. The header fields are big-endian, unsigned integers. Field Length Type Description Version 1 byte Protocol Version Channel type 1 byte 0 - inc, 1 - snapshot, 2 - definitions. Packet length 2 short Total packet length, including header. Sequence Number 8 long Openfeed sequence. Channel Reset 1 byte Channel reset indicator. Channel Id 2 short Openfeed Channel Id Message count 2 short number of messages in the packet. Timestamp 8 long timestamp. The sequence number starts at 1 and increments by 1 with with every packet (including heartbeats). Each feed (incremental, snapshot, definition) on a channel has its own distinct sequence numbers. The reset number will be changed to an arbitrary value every time that the channel has been reset. A channel will normally reset once a week on Sunday. The reset will also occur if there is a system failure or upgrade in the middle of the week. A channel reset means that the sequence number has been set to 1, and that all books and session statistics on the channel should be cleared. The channel id identifies which multicast channel the packet was sent on. The message count is the number of Openfeed messages in this packet, following the header. Message Packing Each Openfeed message is prepended with the following header. The header fields are big-endian, unsigned integers. Field Length Type Description Length 2 short Message Length, not including header. Message Type 1 byte Message type. Trade/ BBO, etc. Exchange Id 2 short Exchange Id. This is a new enumerated value. Market Id 8 long Openfeed market id. Market sequence Number 8 long Instrument (market) sequence Message Data variable protobuf Openfeed protocol buffer encoded message Channel Recovery The channel recovery procedure can be used to synchronize the client's state with the ticker plant, so that the all books and session statistics are accurate and the incremental feed can be applied. The channel recovery procedure should be performed when: The client starts up after the channel has begun broadcasting; i.e. the first incremental sequence number seen is greater than one. The client experiences packet loss on the incremental feed; i.e. an incremental sequence number is greater than the previous sequence number plus one The client experiences a system outage that causes channel state to be lost. Market Sequence Number In addition to the packet sequence numbers, the Openfeed tickerplant assigns sequence numbers to individual markets. The market sequence number is useful for performing channel recovery because it allows the client to identify which individual markets have been impacted by a minor outage (such as packet loss). Market sequence numbers start at one and increment by one with every Market Update. Recovery Procedure Record the earliest continuous incremental packet sequence number, or ECIPSN. If a gap in incremental sequence numbers occurs, restart the procedure and reset the ECIPSN. If an old or duplicate packet is received, drop it (check the reset number to see if the channel has been reset.) When applying an incremental market update message, compare the market sequence number to the previous market sequence number for that market. If no previous update has been processed, treat it as zero. If the new market sequence number is equal to one plus the previous number, then this market has not been affected by the outage and the update can be applied normally. Otherwise, place the update in a queue for this market. Treat any instrument definitions on the incremental feed like normal. Begin processing the definition feed once the syncSequence is greater than or equal to the the ECIPSN - 1. Count the number of unique instrument definitions that have been recovered. Once the totalCount field equals the number of recorded definitions AND the syncSequence is greater than or equal to the ECIPSN minus one, then the definition recovery is complete. If the syncSequence is less than the ECIPSN minus one, then it is still possible that the missing incremental packet(s) defined a new instrument. Begin processing the snapshot feed once the syncSequence is greater than or equal to th ECIPSN - 1. If the syncSequence is less than the ECIPSN minus one, then the snapshot is stale and should be discarded. If the marketSequence field of the the market snapshot message is equal to the last market update that was applied, then this market was not affected by thee outage and does not need a snapshot. If the snapshot's marketSequence field is greater than the last applied market update, apply it to the current market state. Discard any queued market update messages that have sequence numbers less than or equal to the snapshot's marketSequence. Apply the rest of the queued updates, so long as the sequences numbers keep incrementing by one. If there is gap in the queued updates, then another snapshot will be needed to restore the market state. Continue processing the snapshot loop until all markets have been restored. Once all market snapshots and instruments have been recovered, the recovery procedure is complete. TCP Connectivity TCP Connectivity is not yet available on Barchart Openfeed. Message Specification The Openfeed wire protocol is based on Google's protocol buffers. Protocol buffers is a data serialization format that makes it easy to interoperate between any platform or language. The protocol is specified in the protocol buffer language, which describes the structure of the messages and fields. These .proto files can be run through a protocol buffer compiler, which will generate efficient code in your programming language of choice for decoding and encoding the messages. The Openfeed protocol is specified in two files: openfeed.proto defines the real time market data messages instrument.proto defines the instrument definition messages Book Management penfeed may disseminate orderbook information in two different formats: market-by-price and market-by-order. The instrument definition will specify which style of book should be used. Openfeed relies on incremental updates to sychronize state between the server and client. Other forms incremental updates simply replace the previous value. Incremental book updates messages are inherently stateful, so care must be taken when managing the order book in order to avoid a corrupted view of the market. Packet loss, out of sequence messages, and incorrect syncronization logic can cause client-side books to become out of sync with the server. Market by Price With market-by-price, order book information is consolidated and dissemenated at the price level. Price levels begin at index 1 and continue until book_depth. Market by Order Market by order provides full order-by-order view of the market. Availability of this feature is limited by exchange functionality. Market-by-order is currently not available on Barchart Openfeed.","title":"Openfeed Developer Guide"},{"location":"#openfeed-developer-guide","text":"","title":"Openfeed Developer Guide"},{"location":"#introduction","text":"Openfeed is a new real-time market data protocol and feed from Barchart.","title":"Introduction"},{"location":"#architecture","text":"","title":"Architecture"},{"location":"#multicast-udp-connectivity","text":"Multicast UDP is the most efficient way to subscribe to a large number of products at a time. Consider using the UDP feed if you need simultaneous access to many markets, or if you need the lowest latency. Multicast UDP requires data center colocation with Barchart. Please contact Barchart for more information.","title":"Multicast UDP Connectivity"},{"location":"#channels-and-feeds","text":"Market data over multicast UDP is segmented across a number of channels. A channel is a logical grouping of instruments, typically corresponding to a group of products from a particular exchange. A channel is identified by a numeric channelId in the range of 1-255 Each channel is composed of a set of three multicast groups, called feeds. Channel ID Product Incremental Feed Snapshot Feed Definition Feed 1 CME 239.255.201.1:10001 239.255.202.1:20001 239.255.203.1:30001 2 CBOT 239.255.201.2:10002 239.255.202.2:20002 239.255.203.2:30002 3 NYMEX 239.255.201.3:10003 239.255.202.3:20003 239.255.203.3:30003 4 COMEX 239.255.201.4:10004 239.255.202.4:20004 239.255.203.4:30004 5 MGEX 239.255.201.5:10005 239.255.202.5:20005 239.255.203.5:30005 6 CME Europe 239.255.201.6:10006 239.255.202.6:20006 239.255.203.6:30006 7 BM&F 239.255.201.7:10007 239.255.202.7:20007 239.255.203.7:30007 8 ICE UK 239.255.201.8:10008 239.255.202.8:20008 239.255.203.8:30008 9 BATS 239.255.201.9:10009 239.255.202.9:20009 239.255.203.9:30009 10 NYSE Index 239.255.201.10:10010 239.255.202.10:20010 239.255.203.10:30010 11 FTSE Index 239.255.201.11:10011 239.255.202.11:20011 239.255.203.11:30011 12 S&P / DJ Index 239.255.201.12:10012 239.255.202.12:20012 239.255.203.12:30012 13 FOREX 239.255.201.13:10013 239.255.202.13:20013 239.255.203.13:30013 14 TSX 239.255.201.14:10014 239.255.202.14:20014 239.255.203.14:30014 15 239.255.201.15:10015 239.255.202.15:20015 239.255.203.15:30015 16 239.255.201.16:10016 239.255.202.16:20016 239.255.203.16:30016 17 239.255.201.17:10017 239.255.202.17:20017 239.255.203.17:30017 18 ERIS 239.255.201.18:10018 239.255.202.18:20018 239.255.203.18:30018 19 NASDAQ Mutual Funds 239.255.201.19:10019 239.255.202.19:20019 239.255.203.19:30019 20 FINRA OTC 239.255.201.20:10020 239.255.202.20:20020 239.255.203.20:30020 21 LME 239.255.201.21:10021 239.255.202.21:20021 239.255.203.21:30021 22 CFE 239.255.201.22:10022 239.255.202.22:20022 239.255.203.22:30022 23 Euronext 239.255.201.23:10023 239.255.202.23:20023 239.255.203.23:30023 24 ASX 239.255.201.24:10024 239.255.202.24:20024 239.255.203.24:30024 25 Montreal 239.255.201.25:10025 239.255.202.25:20025 239.255.203.25:30025 26 EUREX 239.255.201.26:10026 239.255.202.26:20026 239.255.203.26:30026 27 NASDAQ Index 239.255.201.27:10027 239.255.202.27:20027 239.255.203.27:30027 28 CBOE Index 239.255.201.28:10028 239.255.202.28:20028 239.255.203.28:30028 29 239.255.201.29:10029 239.255.202.29:20029 239.255.203.29:30029 30 239.255.201.30:10030 239.255.202.30:20030 239.255.203.30:30030 31 239.255.201.31:10031 239.255.202.31:20031 239.255.203.31:30031 32 239.255.201.32:10032 239.255.202.32:20032 239.255.203.32:30032 33 Hong Kong Futures 239.255.201.33:10033 239.255.202.33:20033 239.255.203.33:30033 34 239.255.201.34:10034 239.255.202.34:20034 239.255.203.34:30034 35 ICE 239.255.201.35:10035 239.255.202.35:20035 239.255.203.35:30035","title":"Channels and Feeds"},{"location":"#incremental-feed","text":"The incremental feed is a sequence of messages that reflect updates to the current state of the channel. An Openfeed message on the incremental feed can contain either an instrument definition or a market update. The translator will send all current Instrument Definitions upon Sunday system startup. If a new instrument is created during the week, the translator will send the instrument definition prior to any market updates. The packet sequence number will increment by 1 with every packet. A gap in sequence numbers indicates packet loss, and the client will need perform the channel recovery procedure in order to guarantee the correctness of the books and session statistics.","title":"Incremental Feed"},{"location":"#snapshot-feed","text":"The snapshot feed is used to recover the state of the channel in case the client suffers an outage, or joins the channel late. The snapshot feed operates in a loop over all the instruments on the channel. The loop is configured per-channel to generate market snapshots at a certain rate. Once all snapshots have been sent, the sequence number resets to 1 and the loop restarts. The total number of markets available on a channel at the time the snapshot was generated is recorded in the totalCount field. When a snapshot is generated, the syncSequence field will be populated with the last packet sequence number sent on the incremental channel. This is useful for synchronizing between the snapshot and incremental feeds when performing the channel recovery procedure.","title":"Snapshot Feed"},{"location":"#definition-feed","text":"The definition feed is used to recover the instrument definitions on the channel. If the client misses the instrument definition broadcast on the incremental feed at Sunday start up, the definitions can be recovered from the definition feed. Additionally, if the client experiences packet loss or a client failure, the definition feed can be used to recover any newly created instrument definitions that may have been missed. Like the snapshot feed, the definition feed operates in a loop over all the instruments on the channel. The totalCount field is populated with the total number instruments available at the time packet was sent. Additional instruments added to the channel during the instrument loop will included in the loop before restarts. next loop. The syncSequence field is populated with the most recent packet sequence number sent on the incremental feed.","title":"Definition Feed"},{"location":"#packet-format","text":"A single UDP packet contains one binary header and zero or more openfeed messages.","title":"Packet Format"},{"location":"#binary-header","text":"Each UDP packet payload starts with a binary header. The header fields are big-endian, unsigned integers. Field Length Type Description Version 1 byte Protocol Version Channel type 1 byte 0 - inc, 1 - snapshot, 2 - definitions. Packet length 2 short Total packet length, including header. Sequence Number 8 long Openfeed sequence. Channel Reset 1 byte Channel reset indicator. Channel Id 2 short Openfeed Channel Id Message count 2 short number of messages in the packet. Timestamp 8 long timestamp. The sequence number starts at 1 and increments by 1 with with every packet (including heartbeats). Each feed (incremental, snapshot, definition) on a channel has its own distinct sequence numbers. The reset number will be changed to an arbitrary value every time that the channel has been reset. A channel will normally reset once a week on Sunday. The reset will also occur if there is a system failure or upgrade in the middle of the week. A channel reset means that the sequence number has been set to 1, and that all books and session statistics on the channel should be cleared. The channel id identifies which multicast channel the packet was sent on. The message count is the number of Openfeed messages in this packet, following the header.","title":"Binary Header"},{"location":"#message-packing","text":"Each Openfeed message is prepended with the following header. The header fields are big-endian, unsigned integers. Field Length Type Description Length 2 short Message Length, not including header. Message Type 1 byte Message type. Trade/ BBO, etc. Exchange Id 2 short Exchange Id. This is a new enumerated value. Market Id 8 long Openfeed market id. Market sequence Number 8 long Instrument (market) sequence Message Data variable protobuf Openfeed protocol buffer encoded message","title":"Message Packing"},{"location":"#channel-recovery","text":"The channel recovery procedure can be used to synchronize the client's state with the ticker plant, so that the all books and session statistics are accurate and the incremental feed can be applied. The channel recovery procedure should be performed when: The client starts up after the channel has begun broadcasting; i.e. the first incremental sequence number seen is greater than one. The client experiences packet loss on the incremental feed; i.e. an incremental sequence number is greater than the previous sequence number plus one The client experiences a system outage that causes channel state to be lost.","title":"Channel Recovery"},{"location":"#market-sequence-number","text":"In addition to the packet sequence numbers, the Openfeed tickerplant assigns sequence numbers to individual markets. The market sequence number is useful for performing channel recovery because it allows the client to identify which individual markets have been impacted by a minor outage (such as packet loss). Market sequence numbers start at one and increment by one with every Market Update.","title":"Market Sequence Number"},{"location":"#recovery-procedure","text":"Record the earliest continuous incremental packet sequence number, or ECIPSN. If a gap in incremental sequence numbers occurs, restart the procedure and reset the ECIPSN. If an old or duplicate packet is received, drop it (check the reset number to see if the channel has been reset.) When applying an incremental market update message, compare the market sequence number to the previous market sequence number for that market. If no previous update has been processed, treat it as zero. If the new market sequence number is equal to one plus the previous number, then this market has not been affected by the outage and the update can be applied normally. Otherwise, place the update in a queue for this market. Treat any instrument definitions on the incremental feed like normal. Begin processing the definition feed once the syncSequence is greater than or equal to the the ECIPSN - 1. Count the number of unique instrument definitions that have been recovered. Once the totalCount field equals the number of recorded definitions AND the syncSequence is greater than or equal to the ECIPSN minus one, then the definition recovery is complete. If the syncSequence is less than the ECIPSN minus one, then it is still possible that the missing incremental packet(s) defined a new instrument. Begin processing the snapshot feed once the syncSequence is greater than or equal to th ECIPSN - 1. If the syncSequence is less than the ECIPSN minus one, then the snapshot is stale and should be discarded. If the marketSequence field of the the market snapshot message is equal to the last market update that was applied, then this market was not affected by thee outage and does not need a snapshot. If the snapshot's marketSequence field is greater than the last applied market update, apply it to the current market state. Discard any queued market update messages that have sequence numbers less than or equal to the snapshot's marketSequence. Apply the rest of the queued updates, so long as the sequences numbers keep incrementing by one. If there is gap in the queued updates, then another snapshot will be needed to restore the market state. Continue processing the snapshot loop until all markets have been restored. Once all market snapshots and instruments have been recovered, the recovery procedure is complete.","title":"Recovery Procedure"},{"location":"#tcp-connectivity","text":"TCP Connectivity is not yet available on Barchart Openfeed.","title":"TCP Connectivity"},{"location":"#message-specification","text":"The Openfeed wire protocol is based on Google's protocol buffers. Protocol buffers is a data serialization format that makes it easy to interoperate between any platform or language. The protocol is specified in the protocol buffer language, which describes the structure of the messages and fields. These .proto files can be run through a protocol buffer compiler, which will generate efficient code in your programming language of choice for decoding and encoding the messages. The Openfeed protocol is specified in two files: openfeed.proto defines the real time market data messages instrument.proto defines the instrument definition messages","title":"Message Specification"},{"location":"#book-management","text":"penfeed may disseminate orderbook information in two different formats: market-by-price and market-by-order. The instrument definition will specify which style of book should be used. Openfeed relies on incremental updates to sychronize state between the server and client. Other forms incremental updates simply replace the previous value. Incremental book updates messages are inherently stateful, so care must be taken when managing the order book in order to avoid a corrupted view of the market. Packet loss, out of sequence messages, and incorrect syncronization logic can cause client-side books to become out of sync with the server.","title":"Book Management"},{"location":"#market-by-price","text":"With market-by-price, order book information is consolidated and dissemenated at the price level. Price levels begin at index 1 and continue until book_depth.","title":"Market by Price"},{"location":"#market-by-order","text":"Market by order provides full order-by-order view of the market. Availability of this feature is limited by exchange functionality. Market-by-order is currently not available on Barchart Openfeed.","title":"Market by Order"},{"location":"Message Specification/","text":"Protocol Documentation Table of Contents openfeed.proto AddOrder AddPriceLevel AdminMessage BestBidOffer CapitalDistributions ChannelReset ClearBook Close Context ContextData DeleteOrder DeletePriceLevel DepthOrder DepthOrder.Entry DepthPriceLevel DepthPriceLevel.Entry DividendsIncomeDistributions HeartBeat High IndexValue InstrumentGroupStatus InstrumentStatus Last Low MarketSnapshot MarketSummary MarketUpdate ModifyOrder ModifyPriceLevel MonetaryValue NetAssetValue News NumberOfTrades Open OpenInterest OpenfeedMessage PrevClose Settlement SharesOutstanding TracePoint Trade TradeCancel TradeCorrection Trades Trades.Entry Volume Vwap YearHigh YearLow AdminMessage.Status BookSide CrossType InstrumentTradingStatus MarketSummary.ClearSet OpenCloseSettlementFlag RegulationSHOShortSalePriceTest SettlementTerms openfeed_instrument.proto InstrumentDefinition InstrumentDefinition.Calendar InstrumentDefinition.Event InstrumentDefinition.MaturityDate InstrumentDefinition.PriceFormat InstrumentDefinition.Schedule InstrumentDefinition.SpreadLeg InstrumentDefinition.Symbol InstrumentDefinition.TimeSpan InstrumentDefinition.BookType InstrumentDefinition.EventType InstrumentDefinition.InstrumentType InstrumentDefinition.OptionStyle InstrumentDefinition.OptionType InstrumentDefinition.State Scalar Value Types Top openfeed.proto AddOrder Add an order to the order book. Indexed by orderId, which is unique per channel Field Type Label Description transactionTime sint64 orderId sint64 side BookSide price sint64 quantity sint64 isImplied bool priority sint64 AddPriceLevel Insert a new price level, pushing existing levels down Field Type Label Description transactionTime sint64 UTC Timestamp, nano seconds since Unix epoch level sint32 price level index, starting at 1 side BookSide price sint64 Divide by priceDenominator quantity sint64 Divide by quantityDenominator orderCount sint32 impliedQuantity sint64 AdminMessage Administrative Message Field Type Label Description originationTime sint64 Origination time = UTC timestamp nano seconds since Unix epoch source string languageCode string headLine string text string status AdminMessage.Status BestBidOffer Best Bid and Offer. If a side is not present, then that side has been deleted. Field Type Label Description transactionTime sint64 UTC Timestamp, nano seconds since Unix epoch bidPrice sint64 Divide by priceDenominator bidQuantity sint64 Divide by quantityDenominator bidOrderCount sint32 bidOriginator string Liquidity provider information For Forex: BANK:CITY For Equities: EXCHANGE_MIC bidQuoteCondition string offerPrice sint64 Divide by priceDenominator offerQuantity sint64 Divide by quantityDenominator offerOrderCount sint32 offerOriginator string Liquidity provider information For Forex: BANK:CITY For Equities: EXCHANGE_MIC offerQuoteCondition string quoteCondition string nationalBboUpdated bool CapitalDistributions Capital Distributions Field Type Label Description transactionTime sint64 instrumentType string corporateAction string Corporate Action payableDate sint32 Date only, format 2012-07-04 -> 20120704 recordDate sint32 exDate sint32 shortTermCapitalGain sint64 Distributions longTermCapitalGain sint64 unallocatedDistributions sint64 returnOfCapital sint64 currencyCode string notes string repeated reinvestDate sint32 ChannelReset Channel Reset Field Type Label Description channel sint32 transactionTime sint64 ClearBook Clear all data from the order books that are configured for this market. Field Type Label Description reserved sint32 transactionTime sint64 Close Field Type Label Description transactionTime sint64 tradeDate sint32 Date only, format 2012-07-04 -> 20120704 price sint64 Divide by priceDenominator currency string Context Field Type Label Description data ContextData repeated tracePoints TracePoint repeated ContextData Field Type Label Description id string vstring string vbytes bytes vbool bool vsint32 sint32 vsint64 sint64 vfloat float vdouble double DeleteOrder Delete an order from the order book. Indexed by orderId, which is unique per channel Field Type Label Description transactionTime sint64 orderId sint64 side BookSide DeletePriceLevel Delete an existing price level, pulling existing levels up Field Type Label Description transactionTime sint64 UTC Timestamp, nano seconds since Unix epoch level sint32 price level index, starting at 1 side BookSide DepthOrder Depth By Order Field Type Label Description orders DepthOrder.Entry repeated DepthOrder.Entry Field Type Label Description addOrder AddOrder deleteOrder DeleteOrder modifyOrder ModifyOrder DepthPriceLevel Depth Price Level Field Type Label Description levels DepthPriceLevel.Entry repeated DepthPriceLevel.Entry Field Type Label Description addPriceLevel AddPriceLevel deletePriceLevel DeletePriceLevel modifyPriceLevel ModifyPriceLevel DividendsIncomeDistributions Dividends and Income Distributions Field Type Label Description transactionTime sint64 instrumentType string corporateAction string Corporate Action distributionType string Distribution Type payableDate sint32 Date only, format 2012-07-04 -> 20120704 recordDate sint32 exDividendDate sint32 amount sint64 Cash amount of distribution currencyCode string notes string repeated totalCashDistribution sint64 nonQualifiedCashDistribution sint64 qualifiedCashDistribution sint64 taxFreeCashDistribution sint64 ordinaryForeignTaxCredit sint64 qualifiedForeignTaxCredit sint64 stockDividendRatio sint64 reinvestDate sint32 HeartBeat Heart Beat Field Type Label Description transactionTime sint64 UTC timestamp of transaction, nano seconds since Unix epoch status string High Field Type Label Description transactionTime sint64 tradeDate sint32 Date only, format 2012-07-04 -> 20120704 price sint64 Divide by priceDenominator currency string IndexValue For non-tradable index products Field Type Label Description transactionTime sint64 UTC Timestamp, nano seconds since Unix epoch tradeDate sint32 Date only, format 2012-07-04 -> 20120704 last sint64 volume sint64 open sint64 settlementOpen sint64 specialOpen sint64 high sint64 low sint64 close sint64 bid sint64 offer sint64 InstrumentGroupStatus Instrument Group Status Field Type Label Description transactionTime sint64 UTC Timestamp of transaction, nano seconds since Unix epoch instrumentGroupId string tradingStatus InstrumentTradingStatus tradeDate sint32 InstrumentStatus Instrument Status Field Type Label Description transactionTime sint64 UTC Timestamp, nano seconds since Unix epoch tradingStatus InstrumentTradingStatus openingTime sint64 UTC Timestamp, nano seconds since Unix epoch note string tradeDate sint32 Date only, format 2012-07-04 -> 20120704 regulationSHOShortSalePriceTest RegulationSHOShortSalePriceTest Last Field Type Label Description transactionTime sint64 tradeDate sint32 Date only, format 2012-07-04 -> 20120704 price sint64 Divide by priceDenominator quantity sint64 Divide by quantityDenominator currency string Low Field Type Label Description transactionTime sint64 tradeDate sint32 Date only, format 2012-07-04 -> 20120704 price sint64 Divide by priceDenominator currency string MarketSnapshot Snapshot for a market Field Type Label Description marketId sint64 Unique id identifying the market transactionTime sint64 UTC Timestamp of transaction, nano seconds since Unix epoch marketSequence int64 Instrument level sequence number tradeDate sint32 Date only, format 2012-07-04 -> 20120704 totalChunks sint32 A snapshot with market depth may exceed the maximum message size. In that case, the snapshot will be broken up across multiple snapshot messages. currentChunk sint32 symbol string Optional symbol identifier priceDenominator sint32 Divide prices by this value to get real price values. Optional, use value / from InstrumentDefinition if not set. instrumentStatus InstrumentStatus bbo BestBidOffer Best Bid Offer index IndexValue Index Value priceLevels AddPriceLevel repeated Price Level Book orders AddOrder repeated Order Book news News open Open Most recent opening price high High High price for the trading session low Low Low price for the trading session close Close Most recent closing price prevClose PrevClose Previous closing price last Last Most recent traded price and quantity yearHigh YearHigh Year high price yearLow YearLow Year low price volume Volume Total traded volume settlement Settlement Most recent settlement price openInterest OpenInterest Most recent open interest vwap Vwap Most recent volume weighted average price dividendsIncomeDistributions DividendsIncomeDistributions numberOfTrades NumberOfTrades monetaryValue MonetaryValue capitalDistributions CapitalDistributions sharesOutstanding SharesOutstanding netAssetValue NetAssetValue MarketSummary Intra and EOD Market Summary Field Type Label Description transactionTime sint64 tradingDate sint32 Date only, format 2012-07-04 -> 20120704 startOfDay bool endOfDay bool clear MarketSummary.ClearSet instrumentStatus InstrumentStatus bbo BestBidOffer open Open high High low Low close Close prevClose PrevClose last Last volume Volume settlement Settlement openInterest OpenInterest vwap Vwap MarketUpdate Market Update for an instrument Field Type Label Description marketId sint64 Unique id identifying the market symbol string Optional symbol identifier transactionTime sint64 UTC Timestamp of transaction, nano seconds since Unix epoch / This is usually the execution venue timestamp. distributionTime sint64 Distribution time in nano seconds since epoch. / Execution timestamp of market participant for multi participant venues like CTA, UTP, etc.. marketSequence sint64 Market level sequencing number sourceSequence sint64 Data source sequence number originatorId string Market participant/originator consolidated bool True if data is consolidated over many market participants/originators priceDenominator sint32 Divide prices by this value to get real price values. Optional, use value / from InstrumentDefinition if not set. context Context Feed specific context data set as required. news News clearBook ClearBook instrumentStatus InstrumentStatus bbo BestBidOffer depthPriceLevel DepthPriceLevel depthOrder DepthOrder index IndexValue trades Trades open Open high High low Low close Close prevClose PrevClose last Last yearHigh YearHigh yearLow YearLow volume Volume settlement Settlement openInterest OpenInterest vwap Vwap dividendsIncomeDistributions DividendsIncomeDistributions numberOfTrades NumberOfTrades monetaryValue MonetaryValue capitalDistributions CapitalDistributions sharesOutstanding SharesOutstanding netAssetValue NetAssetValue marketSummary MarketSummary ModifyOrder Modify the price or quantity of an order. The side and implied flag cannot change Field Type Label Description transactionTime sint64 orderId sint64 side BookSide price sint64 quantity sint64 isImplied bool priority sint64 ModifyPriceLevel Modify the quantity or orderCount of an existing price level. / The price itself will not change. Field Type Label Description transactionTime sint64 UTC Timestamp, nano seconds since Unix epoch level sint32 price level index, starting at 1 side BookSide price sint64 Divide by priceDenominator quantity sint64 Divide by quantityDenominator orderCount sint32 impliedQuantity sint64 MonetaryValue Total monetary value of trades Field Type Label Description transactionTime sint64 tradeDate sint32 Date only, format 2012-07-04 -> 20120704 value sint64 Divide by priceDenominator valueCurrencyCode string NetAssetValue Field Type Label Description netAssetValue sint64 transactionTime sint64 News News or informational message Field Type Label Description originationTime sint64 Origination time = UTC timestamp nano seconds since Unix epoch source string languageCode string headLine string text string symbols string repeated NumberOfTrades Total number of trades Field Type Label Description transactionTime sint64 tradeDate sint32 Date only, format 2012-07-04 -> 20120704 numberTrades sint64 Open Field Type Label Description transactionTime sint64 tradeDate sint32 Date only, format 2012-07-04 -> 20120704 price sint64 Divide by priceDenominator OpenCloseSettlementFlag OpenCloseSettlementFlag currency string OpenInterest Open interest Field Type Label Description transactionTime sint64 tradeDate sint32 Date only, format 2012-07-04 -> 20120704 volume sint64 OpenfeedMessage A wrapper for Openfeed data. Will contain exactly one of the supported message types Field Type Label Description sendingTime sint64 Nanoecond unix epoch at time of message transmission (UTC) totalCount sint32 The total number of markets available on this channel at the time the message was sent. For UDP snapshot and definition feeds. syncSequence int64 The most recent packet sequence number sent on the incremental feed at the time this message was sent. For UDP snapshot and definition feeds. context Context Feed specific context data channelReset ChannelReset heartBeat HeartBeat adminMessage AdminMessage instrumentDefinition InstrumentDefinition instrumentGroupStatus InstrumentGroupStatus marketSnapshot MarketSnapshot marketUpdate MarketUpdate PrevClose Field Type Label Description transactionTime sint64 tradeDate sint32 Date only, format 2012-07-04 -> 20120704 price sint64 Divide by priceDenominator currency string Settlement Settlement value for futures and options markets. Field Type Label Description transactionTime sint64 tradeDate sint32 Date only, format 2012-07-04 -> 20120704 price sint64 Divide by priceDenominator preliminarySettle bool currency string reserved bool Reserved SharesOutstanding Field Type Label Description sharesOutstanding sint64 transactionTime sint64 TracePoint Tracing Field Type Label Description id string componentId string timestampNs sint64 componentLatencyNs int32 Trade A live trade. When received, update the \"last\" field Field Type Label Description originatorId string Market participant/originator transactionTime sint64 UTC Timestamp, nano seconds since Unix epoch price sint64 Divide by priceDenominator quantity sint64 Divide by quantityDenominator tradeId string side BookSide The side of the aggressing order that caused the trade tradeDate sint32 Date only, format 2012-07-04 -> 20120704 buyerId string sellerId string openingTrade bool systemPriced bool marketOnClose bool oddLot bool settlementTerms SettlementTerms crossType CrossType byPass bool lastPrice sint64 saleCondition string currency string TradeCancel Trade Cancel/Break Field Type Label Description originatorId string Market participant/originator transactionTime sint64 correctedTradePrice sint64 correctedTradeQuantity sint64 tradeId string saleCondition string currency string TradeCorrection Trade Correction Field Type Label Description originatorId string Market participant/originator transactionTime sint64 price sint64 Corrected Price quantity sint64 Corrected Quantity tradeId string side BookSide tradeDate sint32 Date only, format 2012-07-04 -> 20120704 buyerId string sellerId string openingTrade bool systemPriced bool marketOnClose bool oddLot bool settlementTerms SettlementTerms crossType CrossType byPass bool originalTradeId string saleCondition string currency string Trades Trades Field Type Label Description trades Trades.Entry repeated Trades.Entry Field Type Label Description trade Trade tradeCorrection TradeCorrection tradeCancel TradeCancel Volume Total volume traded Field Type Label Description transactionTime sint64 tradeDate sint32 Date only, format 2012-07-04 -> 20120704 volume sint64 Total volume traded. Vwap Volume Weighted Average Price Field Type Label Description transactionTime sint64 tradeDate sint32 Date only, format 2012-07-04 -> 20120704 vwap sint64 YearHigh 52 week Field Type Label Description transactionTime sint64 price sint64 Divide by priceDenominator currency string YearLow 52 week Field Type Label Description transactionTime sint64 price sint64 Divide by priceDenominator currency string AdminMessage.Status Name Number Description OK 0 BookSide Book side Name Number Description UNKNOWN_BOOK_SIDE 0 BID 1 OFFER 2 CrossType Name Number Description UNKNOWN_CROSS_TYPE 0 DEFAULT 1 INTERNAL 2 BASIS 3 CONTINGENT 4 SPECIAL 5 VWAP 6 REGULAR 7 InstrumentTradingStatus Name Number Description UNKNOWN_TRADING_STATUS 0 TRADING_RESUME 1 PRE_OPEN 2 OPEN 3 PRE_CLOSE 4 CLOSE 5 TRADING_HALT 6 QUOTATION_RESUME 7 OPEN_DELAY 8 NO_OPEN_NO_RESUME 9 FAST_MARKET 10 FAST_MARKET_END 11 LATE_MARKET 12 LATE_MARKET_END 13 POST_SESSION 14 POST_SESSION_END 15 NEW_PRICE_INDICATION 16 NOT_AVAILABLE_FOR_TRADING 17 PRE_CROSS 18 CROSS 19 POST_CLOSE 20 NO_CHANGE 21 MarketSummary.ClearSet Clears sets of fields Name Number Description NONE 0 ALL 1 BA 2 CUSTOM_1 3 OpenCloseSettlementFlag Name Number Description UNKNOWN 0 DAILY_OPEN 1 INDICATIVE_OPEN_PRICE 2 RegulationSHOShortSalePriceTest Name Number Description UNKNOWN_PRICE_TEST 0 PRICE_TEST_NONE 1 PRICE_TEST_IN_EFFECT 2 PRICE_TEST_REMAINS_IN_EFFECT 3 SettlementTerms Name Number Description UNKNOWN_SETTLEMENT_TERMS 0 CASH 1 NON_NET 2 CONTINGENT_TRADE 3 CASH_TODAY 4 DATE 5 Top openfeed_instrument.proto InstrumentDefinition Field Type Label Description marketId sint64 Unique ID used in the data feed. instrumentType InstrumentDefinition.InstrumentType Instrument type as enum... supportBookTypes InstrumentDefinition.BookType repeated Supported Book Types bookDepth sint32 Maximum depth of market-by-price order book vendorId string The name of the market data vendor symbol string Human readable market symbol, assigned by the exchange or venue. Not necessarily unique as the exchange or vendor could assign the same symbol to different instruments, for example if the instruments trade on different exchanges. description string Human readable market description. cfiCode string Market CFI code: http://en.wikipedia.org/wiki/ISO_10962 currencyCode string Market currency code: http://en.wikipedia.org/wiki/ISO_4217 exchangeCode string Market exchange code: http://en.wikipedia.org/wiki/ISO_10383 For inter-exchange spreads, use the leg MICs separated by a hyphen minimumPriceIncrement float Minimum price increment in market currency. contractPointValue float Contract point value in market currency. schedule InstrumentDefinition.Schedule Trading schedule for a typical week calendar InstrumentDefinition.Calendar Trading calendar (expiration, notice days, holidays?, etc) recordCreateTime sint64 UTC Timestamp of creation, nano seconds since Unix epoch recordUpdateTime sint64 UTC Timestamp of update, nano seconds since Unix epoch timeZoneName string Market time zone TZ database name. Permanent. Can be resolved into timeZoneOffset for given date/time. See http://joda-time.sourceforge.net/timezones.html See http://en.wikipedia.org/wiki/List_of_tz_database_time_zones instrumentGroup string Identifies a logical grouping of instruments. By product, for example. symbolExpiration InstrumentDefinition.MaturityDate The Date of expiration for futures and options. state InstrumentDefinition.State active: can have market state updates, can have historical data passive: can NOT have market state updates, but can have historical data normally \"active\" means newly listed or currently non expired markets normally \"passive\" means expired options, de-listed equities, etc. channel sint32 The channel that updates for this instrument will appear on. underlyingMarketId sint64 The marketId of the underlying asset. Used by Futures and Options when the underlying instrument is defined by the vendor priceFormat InstrumentDefinition.PriceFormat Display format optionStrikePriceFormat InstrumentDefinition.PriceFormat Strike price display format priceDenominator sint32 Divide prices by this value to get real price values quantityDenominator sint32 Divide trade quantities by this value to get real quantities isTradable bool true if this is a tradable instrument transactionTime sint64 UTC timestamp of transaction, nano seconds since Unix epoch auxiliaryData bytes For internal use only. Ignore symbols InstrumentDefinition.Symbol repeated List of alternate symbols for this instrument. A single instrument may be provided by many different market data vendors, each with their own unique symbology. Allows this instrument to be tagged with as many vendor symbols as necessary. optionStrike sint64 Option strike price in market currency. Multiply by / factorOptionsStrike to get actual strike optionType InstrumentDefinition.OptionType Option type: call vs put. optionStyle InstrumentDefinition.OptionStyle Option style : American vs European. optionStrikeDenominator sint32 Divide optionStrike by this value to get real strike price spreadCode string Spread type, can be vendor specific spreadLeg InstrumentDefinition.SpreadLeg repeated Ordered list of underlying legs in a spread. userDefinedSpread bool true if user defined spread marketTier string Listing market classification financialStatusIndicator string Current financial status of the issuer isin string ISIN: https://en.wikipedia.org/wiki/International_Securities_Identification_Number InstrumentDefinition.Calendar Field Type Label Description events InstrumentDefinition.Event repeated InstrumentDefinition.Event Field Type Label Description type InstrumentDefinition.EventType date sint64 InstrumentDefinition.MaturityDate Date and time with time zone. Field Type Label Description year sint32 Year of century. month sint32 Month of year. day sint32 Day of month. InstrumentDefinition.PriceFormat Recommended display format for prices. Field Type Label Description isFractional bool denominator sint32 subDenominator sint32 subFormat InstrumentDefinition.PriceFormat.SubFormat InstrumentDefinition.Schedule Typical trading week schedule Field Type Label Description sessions InstrumentDefinition.TimeSpan repeated InstrumentDefinition.SpreadLeg Field Type Label Description marketId sint64 The marketId of the leg ratio sint32 The ratio of the this leg with respect to the spread. Negative means short the absolute value, positive means long the absolute value. FIXME? Alternatively, we could have separate LONG/SHORT indicator in the message and use this field as only the absolute value symbol string Additional information about the leg will be found in the instrument definition for the leg. It is not included here to reduce duplication. InstrumentDefinition.Symbol A vendor's symbol for an instrument Field Type Label Description vendor string The vendor that provides this symbol. symbol string The symbol assigned by the vendor. InstrumentDefinition.TimeSpan Trading session Times are in nanos since midnight UTC on the Sunday starting a given trading week Field Type Label Description timeStart sint64 timeFinish sint64 InstrumentDefinition.BookType Market depth implementation type Name Number Description UNKNOWN_BOOK_TYPE 0 TOP_OF_BOOK 1 BBO PRICE_LEVEL_DEPTH 2 Book uses price level ORDER_DEPTH 3 Book uses order-id InstrumentDefinition.EventType Name Number Description UNKNOWN_EVENT_TYPE 0 FIRST_TRADE_DATE 1 All instruments LAST_TRADE_DATE 2 SETTLEMENT_DATE 10 Futures only FIRST_DELIVERY_DATE 11 LAST_DELIVERY_DATE 12 FIRST_NOTICE_DATE 13 LAST_NOTICE_DATE 14 FIRST_HOLDING_DATE 15 LAST_HOLDING_DATE 16 FIRST_POSITION_DATE 17 LAST_POSITION_DATE 18 InstrumentDefinition.InstrumentType Name Number Description UNKNOWN_INSTRUMENT_TYPE 0 FOREX 1 INDEX 2 EQUITY 3 FUTURE 4 OPTION 5 SPREAD 6 MUTUAL_FUND 7 MONEY_MARKET_FUND 8 InstrumentDefinition.OptionStyle Option style. Name Number Description UNKNOWN_OPTIONS_STYLE 0 DEFAULT 1 AMERICAN 2 EUROPEAN 3 InstrumentDefinition.OptionType Option type. Name Number Description UNKNOWN_OPTION_TYPE 0 CALL 1 PUT 2 InstrumentDefinition.State Name Number Description UNKNOWN_STATE 0 ACTIVE 1 PASSIVE 2 Scalar Value Types .proto Type Notes C++ Type Java Type Python Type double double double float float float float float int32 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint32 instead. int32 int int int64 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint64 instead. int64 long int/long uint32 Uses variable-length encoding. uint32 int int/long uint64 Uses variable-length encoding. uint64 long int/long sint32 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int32s. int32 int int sint64 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int64s. int64 long int/long fixed32 Always four bytes. More efficient than uint32 if values are often greater than 2^28. uint32 int int fixed64 Always eight bytes. More efficient than uint64 if values are often greater than 2^56. uint64 long int/long sfixed32 Always four bytes. int32 int int sfixed64 Always eight bytes. int64 long int/long bool bool boolean boolean string A string must always contain UTF-8 encoded or 7-bit ASCII text. string String str/unicode bytes May contain any arbitrary sequence of bytes. string ByteString str","title":"Protocol Documentation"},{"location":"Message Specification/#protocol-documentation","text":"","title":"Protocol Documentation"},{"location":"Message Specification/#table-of-contents","text":"openfeed.proto AddOrder AddPriceLevel AdminMessage BestBidOffer CapitalDistributions ChannelReset ClearBook Close Context ContextData DeleteOrder DeletePriceLevel DepthOrder DepthOrder.Entry DepthPriceLevel DepthPriceLevel.Entry DividendsIncomeDistributions HeartBeat High IndexValue InstrumentGroupStatus InstrumentStatus Last Low MarketSnapshot MarketSummary MarketUpdate ModifyOrder ModifyPriceLevel MonetaryValue NetAssetValue News NumberOfTrades Open OpenInterest OpenfeedMessage PrevClose Settlement SharesOutstanding TracePoint Trade TradeCancel TradeCorrection Trades Trades.Entry Volume Vwap YearHigh YearLow AdminMessage.Status BookSide CrossType InstrumentTradingStatus MarketSummary.ClearSet OpenCloseSettlementFlag RegulationSHOShortSalePriceTest SettlementTerms openfeed_instrument.proto InstrumentDefinition InstrumentDefinition.Calendar InstrumentDefinition.Event InstrumentDefinition.MaturityDate InstrumentDefinition.PriceFormat InstrumentDefinition.Schedule InstrumentDefinition.SpreadLeg InstrumentDefinition.Symbol InstrumentDefinition.TimeSpan InstrumentDefinition.BookType InstrumentDefinition.EventType InstrumentDefinition.InstrumentType InstrumentDefinition.OptionStyle InstrumentDefinition.OptionType InstrumentDefinition.State Scalar Value Types Top","title":"Table of Contents"},{"location":"Message Specification/#openfeedproto","text":"","title":"openfeed.proto"},{"location":"Message Specification/#addorder","text":"Add an order to the order book. Indexed by orderId, which is unique per channel Field Type Label Description transactionTime sint64 orderId sint64 side BookSide price sint64 quantity sint64 isImplied bool priority sint64","title":"AddOrder"},{"location":"Message Specification/#addpricelevel","text":"Insert a new price level, pushing existing levels down Field Type Label Description transactionTime sint64 UTC Timestamp, nano seconds since Unix epoch level sint32 price level index, starting at 1 side BookSide price sint64 Divide by priceDenominator quantity sint64 Divide by quantityDenominator orderCount sint32 impliedQuantity sint64","title":"AddPriceLevel"},{"location":"Message Specification/#adminmessage","text":"Administrative Message Field Type Label Description originationTime sint64 Origination time = UTC timestamp nano seconds since Unix epoch source string languageCode string headLine string text string status AdminMessage.Status","title":"AdminMessage"},{"location":"Message Specification/#bestbidoffer","text":"Best Bid and Offer. If a side is not present, then that side has been deleted. Field Type Label Description transactionTime sint64 UTC Timestamp, nano seconds since Unix epoch bidPrice sint64 Divide by priceDenominator bidQuantity sint64 Divide by quantityDenominator bidOrderCount sint32 bidOriginator string Liquidity provider information For Forex: BANK:CITY For Equities: EXCHANGE_MIC bidQuoteCondition string offerPrice sint64 Divide by priceDenominator offerQuantity sint64 Divide by quantityDenominator offerOrderCount sint32 offerOriginator string Liquidity provider information For Forex: BANK:CITY For Equities: EXCHANGE_MIC offerQuoteCondition string quoteCondition string nationalBboUpdated bool","title":"BestBidOffer"},{"location":"Message Specification/#capitaldistributions","text":"Capital Distributions Field Type Label Description transactionTime sint64 instrumentType string corporateAction string Corporate Action payableDate sint32 Date only, format 2012-07-04 -> 20120704 recordDate sint32 exDate sint32 shortTermCapitalGain sint64 Distributions longTermCapitalGain sint64 unallocatedDistributions sint64 returnOfCapital sint64 currencyCode string notes string repeated reinvestDate sint32","title":"CapitalDistributions"},{"location":"Message Specification/#channelreset","text":"Channel Reset Field Type Label Description channel sint32 transactionTime sint64","title":"ChannelReset"},{"location":"Message Specification/#clearbook","text":"Clear all data from the order books that are configured for this market. Field Type Label Description reserved sint32 transactionTime sint64","title":"ClearBook"},{"location":"Message Specification/#close","text":"Field Type Label Description transactionTime sint64 tradeDate sint32 Date only, format 2012-07-04 -> 20120704 price sint64 Divide by priceDenominator currency string","title":"Close"},{"location":"Message Specification/#context","text":"Field Type Label Description data ContextData repeated tracePoints TracePoint repeated","title":"Context"},{"location":"Message Specification/#contextdata","text":"Field Type Label Description id string vstring string vbytes bytes vbool bool vsint32 sint32 vsint64 sint64 vfloat float vdouble double","title":"ContextData"},{"location":"Message Specification/#deleteorder","text":"Delete an order from the order book. Indexed by orderId, which is unique per channel Field Type Label Description transactionTime sint64 orderId sint64 side BookSide","title":"DeleteOrder"},{"location":"Message Specification/#deletepricelevel","text":"Delete an existing price level, pulling existing levels up Field Type Label Description transactionTime sint64 UTC Timestamp, nano seconds since Unix epoch level sint32 price level index, starting at 1 side BookSide","title":"DeletePriceLevel"},{"location":"Message Specification/#depthorder","text":"Depth By Order Field Type Label Description orders DepthOrder.Entry repeated","title":"DepthOrder"},{"location":"Message Specification/#depthorderentry","text":"Field Type Label Description addOrder AddOrder deleteOrder DeleteOrder modifyOrder ModifyOrder","title":"DepthOrder.Entry"},{"location":"Message Specification/#depthpricelevel","text":"Depth Price Level Field Type Label Description levels DepthPriceLevel.Entry repeated","title":"DepthPriceLevel"},{"location":"Message Specification/#depthpricelevelentry","text":"Field Type Label Description addPriceLevel AddPriceLevel deletePriceLevel DeletePriceLevel modifyPriceLevel ModifyPriceLevel","title":"DepthPriceLevel.Entry"},{"location":"Message Specification/#dividendsincomedistributions","text":"Dividends and Income Distributions Field Type Label Description transactionTime sint64 instrumentType string corporateAction string Corporate Action distributionType string Distribution Type payableDate sint32 Date only, format 2012-07-04 -> 20120704 recordDate sint32 exDividendDate sint32 amount sint64 Cash amount of distribution currencyCode string notes string repeated totalCashDistribution sint64 nonQualifiedCashDistribution sint64 qualifiedCashDistribution sint64 taxFreeCashDistribution sint64 ordinaryForeignTaxCredit sint64 qualifiedForeignTaxCredit sint64 stockDividendRatio sint64 reinvestDate sint32","title":"DividendsIncomeDistributions"},{"location":"Message Specification/#heartbeat","text":"Heart Beat Field Type Label Description transactionTime sint64 UTC timestamp of transaction, nano seconds since Unix epoch status string","title":"HeartBeat"},{"location":"Message Specification/#high","text":"Field Type Label Description transactionTime sint64 tradeDate sint32 Date only, format 2012-07-04 -> 20120704 price sint64 Divide by priceDenominator currency string","title":"High"},{"location":"Message Specification/#indexvalue","text":"For non-tradable index products Field Type Label Description transactionTime sint64 UTC Timestamp, nano seconds since Unix epoch tradeDate sint32 Date only, format 2012-07-04 -> 20120704 last sint64 volume sint64 open sint64 settlementOpen sint64 specialOpen sint64 high sint64 low sint64 close sint64 bid sint64 offer sint64","title":"IndexValue"},{"location":"Message Specification/#instrumentgroupstatus","text":"Instrument Group Status Field Type Label Description transactionTime sint64 UTC Timestamp of transaction, nano seconds since Unix epoch instrumentGroupId string tradingStatus InstrumentTradingStatus tradeDate sint32","title":"InstrumentGroupStatus"},{"location":"Message Specification/#instrumentstatus","text":"Instrument Status Field Type Label Description transactionTime sint64 UTC Timestamp, nano seconds since Unix epoch tradingStatus InstrumentTradingStatus openingTime sint64 UTC Timestamp, nano seconds since Unix epoch note string tradeDate sint32 Date only, format 2012-07-04 -> 20120704 regulationSHOShortSalePriceTest RegulationSHOShortSalePriceTest","title":"InstrumentStatus"},{"location":"Message Specification/#last","text":"Field Type Label Description transactionTime sint64 tradeDate sint32 Date only, format 2012-07-04 -> 20120704 price sint64 Divide by priceDenominator quantity sint64 Divide by quantityDenominator currency string","title":"Last"},{"location":"Message Specification/#low","text":"Field Type Label Description transactionTime sint64 tradeDate sint32 Date only, format 2012-07-04 -> 20120704 price sint64 Divide by priceDenominator currency string","title":"Low"},{"location":"Message Specification/#marketsnapshot","text":"Snapshot for a market Field Type Label Description marketId sint64 Unique id identifying the market transactionTime sint64 UTC Timestamp of transaction, nano seconds since Unix epoch marketSequence int64 Instrument level sequence number tradeDate sint32 Date only, format 2012-07-04 -> 20120704 totalChunks sint32 A snapshot with market depth may exceed the maximum message size. In that case, the snapshot will be broken up across multiple snapshot messages. currentChunk sint32 symbol string Optional symbol identifier priceDenominator sint32 Divide prices by this value to get real price values. Optional, use value / from InstrumentDefinition if not set. instrumentStatus InstrumentStatus bbo BestBidOffer Best Bid Offer index IndexValue Index Value priceLevels AddPriceLevel repeated Price Level Book orders AddOrder repeated Order Book news News open Open Most recent opening price high High High price for the trading session low Low Low price for the trading session close Close Most recent closing price prevClose PrevClose Previous closing price last Last Most recent traded price and quantity yearHigh YearHigh Year high price yearLow YearLow Year low price volume Volume Total traded volume settlement Settlement Most recent settlement price openInterest OpenInterest Most recent open interest vwap Vwap Most recent volume weighted average price dividendsIncomeDistributions DividendsIncomeDistributions numberOfTrades NumberOfTrades monetaryValue MonetaryValue capitalDistributions CapitalDistributions sharesOutstanding SharesOutstanding netAssetValue NetAssetValue","title":"MarketSnapshot"},{"location":"Message Specification/#marketsummary","text":"Intra and EOD Market Summary Field Type Label Description transactionTime sint64 tradingDate sint32 Date only, format 2012-07-04 -> 20120704 startOfDay bool endOfDay bool clear MarketSummary.ClearSet instrumentStatus InstrumentStatus bbo BestBidOffer open Open high High low Low close Close prevClose PrevClose last Last volume Volume settlement Settlement openInterest OpenInterest vwap Vwap","title":"MarketSummary"},{"location":"Message Specification/#marketupdate","text":"Market Update for an instrument Field Type Label Description marketId sint64 Unique id identifying the market symbol string Optional symbol identifier transactionTime sint64 UTC Timestamp of transaction, nano seconds since Unix epoch / This is usually the execution venue timestamp. distributionTime sint64 Distribution time in nano seconds since epoch. / Execution timestamp of market participant for multi participant venues like CTA, UTP, etc.. marketSequence sint64 Market level sequencing number sourceSequence sint64 Data source sequence number originatorId string Market participant/originator consolidated bool True if data is consolidated over many market participants/originators priceDenominator sint32 Divide prices by this value to get real price values. Optional, use value / from InstrumentDefinition if not set. context Context Feed specific context data set as required. news News clearBook ClearBook instrumentStatus InstrumentStatus bbo BestBidOffer depthPriceLevel DepthPriceLevel depthOrder DepthOrder index IndexValue trades Trades open Open high High low Low close Close prevClose PrevClose last Last yearHigh YearHigh yearLow YearLow volume Volume settlement Settlement openInterest OpenInterest vwap Vwap dividendsIncomeDistributions DividendsIncomeDistributions numberOfTrades NumberOfTrades monetaryValue MonetaryValue capitalDistributions CapitalDistributions sharesOutstanding SharesOutstanding netAssetValue NetAssetValue marketSummary MarketSummary","title":"MarketUpdate"},{"location":"Message Specification/#modifyorder","text":"Modify the price or quantity of an order. The side and implied flag cannot change Field Type Label Description transactionTime sint64 orderId sint64 side BookSide price sint64 quantity sint64 isImplied bool priority sint64","title":"ModifyOrder"},{"location":"Message Specification/#modifypricelevel","text":"Modify the quantity or orderCount of an existing price level. / The price itself will not change. Field Type Label Description transactionTime sint64 UTC Timestamp, nano seconds since Unix epoch level sint32 price level index, starting at 1 side BookSide price sint64 Divide by priceDenominator quantity sint64 Divide by quantityDenominator orderCount sint32 impliedQuantity sint64","title":"ModifyPriceLevel"},{"location":"Message Specification/#monetaryvalue","text":"Total monetary value of trades Field Type Label Description transactionTime sint64 tradeDate sint32 Date only, format 2012-07-04 -> 20120704 value sint64 Divide by priceDenominator valueCurrencyCode string","title":"MonetaryValue"},{"location":"Message Specification/#netassetvalue","text":"Field Type Label Description netAssetValue sint64 transactionTime sint64","title":"NetAssetValue"},{"location":"Message Specification/#news","text":"News or informational message Field Type Label Description originationTime sint64 Origination time = UTC timestamp nano seconds since Unix epoch source string languageCode string headLine string text string symbols string repeated","title":"News"},{"location":"Message Specification/#numberoftrades","text":"Total number of trades Field Type Label Description transactionTime sint64 tradeDate sint32 Date only, format 2012-07-04 -> 20120704 numberTrades sint64","title":"NumberOfTrades"},{"location":"Message Specification/#open","text":"Field Type Label Description transactionTime sint64 tradeDate sint32 Date only, format 2012-07-04 -> 20120704 price sint64 Divide by priceDenominator OpenCloseSettlementFlag OpenCloseSettlementFlag currency string","title":"Open"},{"location":"Message Specification/#openinterest","text":"Open interest Field Type Label Description transactionTime sint64 tradeDate sint32 Date only, format 2012-07-04 -> 20120704 volume sint64","title":"OpenInterest"},{"location":"Message Specification/#openfeedmessage","text":"A wrapper for Openfeed data. Will contain exactly one of the supported message types Field Type Label Description sendingTime sint64 Nanoecond unix epoch at time of message transmission (UTC) totalCount sint32 The total number of markets available on this channel at the time the message was sent. For UDP snapshot and definition feeds. syncSequence int64 The most recent packet sequence number sent on the incremental feed at the time this message was sent. For UDP snapshot and definition feeds. context Context Feed specific context data channelReset ChannelReset heartBeat HeartBeat adminMessage AdminMessage instrumentDefinition InstrumentDefinition instrumentGroupStatus InstrumentGroupStatus marketSnapshot MarketSnapshot marketUpdate MarketUpdate","title":"OpenfeedMessage"},{"location":"Message Specification/#prevclose","text":"Field Type Label Description transactionTime sint64 tradeDate sint32 Date only, format 2012-07-04 -> 20120704 price sint64 Divide by priceDenominator currency string","title":"PrevClose"},{"location":"Message Specification/#settlement","text":"Settlement value for futures and options markets. Field Type Label Description transactionTime sint64 tradeDate sint32 Date only, format 2012-07-04 -> 20120704 price sint64 Divide by priceDenominator preliminarySettle bool currency string reserved bool Reserved","title":"Settlement"},{"location":"Message Specification/#sharesoutstanding","text":"Field Type Label Description sharesOutstanding sint64 transactionTime sint64","title":"SharesOutstanding"},{"location":"Message Specification/#tracepoint","text":"Tracing Field Type Label Description id string componentId string timestampNs sint64 componentLatencyNs int32","title":"TracePoint"},{"location":"Message Specification/#trade","text":"A live trade. When received, update the \"last\" field Field Type Label Description originatorId string Market participant/originator transactionTime sint64 UTC Timestamp, nano seconds since Unix epoch price sint64 Divide by priceDenominator quantity sint64 Divide by quantityDenominator tradeId string side BookSide The side of the aggressing order that caused the trade tradeDate sint32 Date only, format 2012-07-04 -> 20120704 buyerId string sellerId string openingTrade bool systemPriced bool marketOnClose bool oddLot bool settlementTerms SettlementTerms crossType CrossType byPass bool lastPrice sint64 saleCondition string currency string","title":"Trade"},{"location":"Message Specification/#tradecancel","text":"Trade Cancel/Break Field Type Label Description originatorId string Market participant/originator transactionTime sint64 correctedTradePrice sint64 correctedTradeQuantity sint64 tradeId string saleCondition string currency string","title":"TradeCancel"},{"location":"Message Specification/#tradecorrection","text":"Trade Correction Field Type Label Description originatorId string Market participant/originator transactionTime sint64 price sint64 Corrected Price quantity sint64 Corrected Quantity tradeId string side BookSide tradeDate sint32 Date only, format 2012-07-04 -> 20120704 buyerId string sellerId string openingTrade bool systemPriced bool marketOnClose bool oddLot bool settlementTerms SettlementTerms crossType CrossType byPass bool originalTradeId string saleCondition string currency string","title":"TradeCorrection"},{"location":"Message Specification/#trades","text":"Trades Field Type Label Description trades Trades.Entry repeated","title":"Trades"},{"location":"Message Specification/#tradesentry","text":"Field Type Label Description trade Trade tradeCorrection TradeCorrection tradeCancel TradeCancel","title":"Trades.Entry"},{"location":"Message Specification/#volume","text":"Total volume traded Field Type Label Description transactionTime sint64 tradeDate sint32 Date only, format 2012-07-04 -> 20120704 volume sint64 Total volume traded.","title":"Volume"},{"location":"Message Specification/#vwap","text":"Volume Weighted Average Price Field Type Label Description transactionTime sint64 tradeDate sint32 Date only, format 2012-07-04 -> 20120704 vwap sint64","title":"Vwap"},{"location":"Message Specification/#yearhigh","text":"52 week Field Type Label Description transactionTime sint64 price sint64 Divide by priceDenominator currency string","title":"YearHigh"},{"location":"Message Specification/#yearlow","text":"52 week Field Type Label Description transactionTime sint64 price sint64 Divide by priceDenominator currency string","title":"YearLow"},{"location":"Message Specification/#adminmessagestatus","text":"Name Number Description OK 0","title":"AdminMessage.Status"},{"location":"Message Specification/#bookside","text":"Book side Name Number Description UNKNOWN_BOOK_SIDE 0 BID 1 OFFER 2","title":"BookSide"},{"location":"Message Specification/#crosstype","text":"Name Number Description UNKNOWN_CROSS_TYPE 0 DEFAULT 1 INTERNAL 2 BASIS 3 CONTINGENT 4 SPECIAL 5 VWAP 6 REGULAR 7","title":"CrossType"},{"location":"Message Specification/#instrumenttradingstatus","text":"Name Number Description UNKNOWN_TRADING_STATUS 0 TRADING_RESUME 1 PRE_OPEN 2 OPEN 3 PRE_CLOSE 4 CLOSE 5 TRADING_HALT 6 QUOTATION_RESUME 7 OPEN_DELAY 8 NO_OPEN_NO_RESUME 9 FAST_MARKET 10 FAST_MARKET_END 11 LATE_MARKET 12 LATE_MARKET_END 13 POST_SESSION 14 POST_SESSION_END 15 NEW_PRICE_INDICATION 16 NOT_AVAILABLE_FOR_TRADING 17 PRE_CROSS 18 CROSS 19 POST_CLOSE 20 NO_CHANGE 21","title":"InstrumentTradingStatus"},{"location":"Message Specification/#marketsummaryclearset","text":"Clears sets of fields Name Number Description NONE 0 ALL 1 BA 2 CUSTOM_1 3","title":"MarketSummary.ClearSet"},{"location":"Message Specification/#openclosesettlementflag","text":"Name Number Description UNKNOWN 0 DAILY_OPEN 1 INDICATIVE_OPEN_PRICE 2","title":"OpenCloseSettlementFlag"},{"location":"Message Specification/#regulationshoshortsalepricetest","text":"Name Number Description UNKNOWN_PRICE_TEST 0 PRICE_TEST_NONE 1 PRICE_TEST_IN_EFFECT 2 PRICE_TEST_REMAINS_IN_EFFECT 3","title":"RegulationSHOShortSalePriceTest"},{"location":"Message Specification/#settlementterms","text":"Name Number Description UNKNOWN_SETTLEMENT_TERMS 0 CASH 1 NON_NET 2 CONTINGENT_TRADE 3 CASH_TODAY 4 DATE 5 Top","title":"SettlementTerms"},{"location":"Message Specification/#openfeed_instrumentproto","text":"","title":"openfeed_instrument.proto"},{"location":"Message Specification/#instrumentdefinition","text":"Field Type Label Description marketId sint64 Unique ID used in the data feed. instrumentType InstrumentDefinition.InstrumentType Instrument type as enum... supportBookTypes InstrumentDefinition.BookType repeated Supported Book Types bookDepth sint32 Maximum depth of market-by-price order book vendorId string The name of the market data vendor symbol string Human readable market symbol, assigned by the exchange or venue. Not necessarily unique as the exchange or vendor could assign the same symbol to different instruments, for example if the instruments trade on different exchanges. description string Human readable market description. cfiCode string Market CFI code: http://en.wikipedia.org/wiki/ISO_10962 currencyCode string Market currency code: http://en.wikipedia.org/wiki/ISO_4217 exchangeCode string Market exchange code: http://en.wikipedia.org/wiki/ISO_10383 For inter-exchange spreads, use the leg MICs separated by a hyphen minimumPriceIncrement float Minimum price increment in market currency. contractPointValue float Contract point value in market currency. schedule InstrumentDefinition.Schedule Trading schedule for a typical week calendar InstrumentDefinition.Calendar Trading calendar (expiration, notice days, holidays?, etc) recordCreateTime sint64 UTC Timestamp of creation, nano seconds since Unix epoch recordUpdateTime sint64 UTC Timestamp of update, nano seconds since Unix epoch timeZoneName string Market time zone TZ database name. Permanent. Can be resolved into timeZoneOffset for given date/time. See http://joda-time.sourceforge.net/timezones.html See http://en.wikipedia.org/wiki/List_of_tz_database_time_zones instrumentGroup string Identifies a logical grouping of instruments. By product, for example. symbolExpiration InstrumentDefinition.MaturityDate The Date of expiration for futures and options. state InstrumentDefinition.State active: can have market state updates, can have historical data passive: can NOT have market state updates, but can have historical data normally \"active\" means newly listed or currently non expired markets normally \"passive\" means expired options, de-listed equities, etc. channel sint32 The channel that updates for this instrument will appear on. underlyingMarketId sint64 The marketId of the underlying asset. Used by Futures and Options when the underlying instrument is defined by the vendor priceFormat InstrumentDefinition.PriceFormat Display format optionStrikePriceFormat InstrumentDefinition.PriceFormat Strike price display format priceDenominator sint32 Divide prices by this value to get real price values quantityDenominator sint32 Divide trade quantities by this value to get real quantities isTradable bool true if this is a tradable instrument transactionTime sint64 UTC timestamp of transaction, nano seconds since Unix epoch auxiliaryData bytes For internal use only. Ignore symbols InstrumentDefinition.Symbol repeated List of alternate symbols for this instrument. A single instrument may be provided by many different market data vendors, each with their own unique symbology. Allows this instrument to be tagged with as many vendor symbols as necessary. optionStrike sint64 Option strike price in market currency. Multiply by / factorOptionsStrike to get actual strike optionType InstrumentDefinition.OptionType Option type: call vs put. optionStyle InstrumentDefinition.OptionStyle Option style : American vs European. optionStrikeDenominator sint32 Divide optionStrike by this value to get real strike price spreadCode string Spread type, can be vendor specific spreadLeg InstrumentDefinition.SpreadLeg repeated Ordered list of underlying legs in a spread. userDefinedSpread bool true if user defined spread marketTier string Listing market classification financialStatusIndicator string Current financial status of the issuer isin string ISIN: https://en.wikipedia.org/wiki/International_Securities_Identification_Number","title":"InstrumentDefinition"},{"location":"Message Specification/#instrumentdefinitioncalendar","text":"Field Type Label Description events InstrumentDefinition.Event repeated","title":"InstrumentDefinition.Calendar"},{"location":"Message Specification/#instrumentdefinitionevent","text":"Field Type Label Description type InstrumentDefinition.EventType date sint64","title":"InstrumentDefinition.Event"},{"location":"Message Specification/#instrumentdefinitionmaturitydate","text":"Date and time with time zone. Field Type Label Description year sint32 Year of century. month sint32 Month of year. day sint32 Day of month.","title":"InstrumentDefinition.MaturityDate"},{"location":"Message Specification/#instrumentdefinitionpriceformat","text":"Recommended display format for prices. Field Type Label Description isFractional bool denominator sint32 subDenominator sint32 subFormat InstrumentDefinition.PriceFormat.SubFormat","title":"InstrumentDefinition.PriceFormat"},{"location":"Message Specification/#instrumentdefinitionschedule","text":"Typical trading week schedule Field Type Label Description sessions InstrumentDefinition.TimeSpan repeated","title":"InstrumentDefinition.Schedule"},{"location":"Message Specification/#instrumentdefinitionspreadleg","text":"Field Type Label Description marketId sint64 The marketId of the leg ratio sint32 The ratio of the this leg with respect to the spread. Negative means short the absolute value, positive means long the absolute value. FIXME? Alternatively, we could have separate LONG/SHORT indicator in the message and use this field as only the absolute value symbol string Additional information about the leg will be found in the instrument definition for the leg. It is not included here to reduce duplication.","title":"InstrumentDefinition.SpreadLeg"},{"location":"Message Specification/#instrumentdefinitionsymbol","text":"A vendor's symbol for an instrument Field Type Label Description vendor string The vendor that provides this symbol. symbol string The symbol assigned by the vendor.","title":"InstrumentDefinition.Symbol"},{"location":"Message Specification/#instrumentdefinitiontimespan","text":"Trading session Times are in nanos since midnight UTC on the Sunday starting a given trading week Field Type Label Description timeStart sint64 timeFinish sint64","title":"InstrumentDefinition.TimeSpan"},{"location":"Message Specification/#instrumentdefinitionbooktype","text":"Market depth implementation type Name Number Description UNKNOWN_BOOK_TYPE 0 TOP_OF_BOOK 1 BBO PRICE_LEVEL_DEPTH 2 Book uses price level ORDER_DEPTH 3 Book uses order-id","title":"InstrumentDefinition.BookType"},{"location":"Message Specification/#instrumentdefinitioneventtype","text":"Name Number Description UNKNOWN_EVENT_TYPE 0 FIRST_TRADE_DATE 1 All instruments LAST_TRADE_DATE 2 SETTLEMENT_DATE 10 Futures only FIRST_DELIVERY_DATE 11 LAST_DELIVERY_DATE 12 FIRST_NOTICE_DATE 13 LAST_NOTICE_DATE 14 FIRST_HOLDING_DATE 15 LAST_HOLDING_DATE 16 FIRST_POSITION_DATE 17 LAST_POSITION_DATE 18","title":"InstrumentDefinition.EventType"},{"location":"Message Specification/#instrumentdefinitioninstrumenttype","text":"","title":"InstrumentDefinition.InstrumentType"},{"location":"Message Specification/#instrumentdefinitionoptionstyle","text":"Option style. Name Number Description UNKNOWN_OPTIONS_STYLE 0 DEFAULT 1 AMERICAN 2 EUROPEAN 3","title":"InstrumentDefinition.OptionStyle"},{"location":"Message Specification/#instrumentdefinitionoptiontype","text":"Option type. Name Number Description UNKNOWN_OPTION_TYPE 0 CALL 1 PUT 2","title":"InstrumentDefinition.OptionType"},{"location":"Message Specification/#instrumentdefinitionstate","text":"Name Number Description UNKNOWN_STATE 0 ACTIVE 1 PASSIVE 2","title":"InstrumentDefinition.State"},{"location":"Message Specification/#scalar-value-types","text":".proto Type Notes C++ Type Java Type Python Type double double double float float float float float int32 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint32 instead. int32 int int int64 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint64 instead. int64 long int/long uint32 Uses variable-length encoding. uint32 int int/long uint64 Uses variable-length encoding. uint64 long int/long sint32 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int32s. int32 int int sint64 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int64s. int64 long int/long fixed32 Always four bytes. More efficient than uint32 if values are often greater than 2^28. uint32 int int fixed64 Always eight bytes. More efficient than uint64 if values are often greater than 2^56. uint64 long int/long sfixed32 Always four bytes. int32 int int sfixed64 Always eight bytes. int64 long int/long bool bool boolean boolean string A string must always contain UTF-8 encoded or 7-bit ASCII text. string String str/unicode bytes May contain any arbitrary sequence of bytes. string ByteString str","title":"Scalar Value Types"}]}